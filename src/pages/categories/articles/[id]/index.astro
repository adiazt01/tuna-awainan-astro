---
import Layout from "../../../../layouts/Layout.astro";
import { supabase } from "../../../../lib/supabase";

const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/404");
}

const { data: post, error: postError } = await supabase
  .from("posts")
  .select("*")
  .eq("id", id?.toString())
  .single();

if (postError || !post) {
  return Astro.redirect("/404");
}

const { data: comments, error: commentsError } = await supabase
  .from("comments")
  .select("content, created_at, user_id (username)")
  .eq("post_id", id?.toString())
  .order("created_at", { ascending: false });
console.log(comments);
if (commentsError) {
  console.error(commentsError);
}

if (Astro.request.method === "POST") {
  try {
    const { cookies, redirect } = Astro;
    const accessToken = cookies.get("sb-access-token");
    const refreshToken = cookies.get("sb-refresh-token");
    const data = await Astro.request.formData();
    const content = data.get("content");

    if (!accessToken || !refreshToken) {
      return Astro.redirect("/signin");
    }

    if (!content) {
      throw new Error("El contenido del comentario es requerido");
    }

    let session;
    try {
      session = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
      });
      if (session.error) {
        Astro.cookies.delete("sb-access-token", {
          path: "/",
        });
        Astro.cookies.delete("sb-refresh-token", {
          path: "/",
        });
        return Astro.redirect("/signin");
      }
    } catch (error) {
      Astro.cookies.delete("sb-access-token", {
        path: "/",
      });
      Astro.cookies.delete("sb-refresh-token", {
        path: "/",
      });
      return Astro.redirect("/signin");
    }

    const user_id = session.data.user?.id;

    if (!user_id) {
      return Astro.redirect("/signin");
    }

    const {data:profile, error:errorFoundUser} = await supabase.from("users").select("*").eq("id", user_id).single();

    if (errorFoundUser) {
      return Astro.redirect("/signin");
    }

    const { error } = await supabase
    .from("comments")
    .insert([
      {
        content: content,
        user_id: profile.id,
        post_id: id
      },
    ])

    if (error) {
      throw new Error("No se pudo guardar el comentario");
    }

    return redirect(Astro.request.url);
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout title={`Tuna Awainan: ${post.title}`}>
  <div class="max-w-4xl mx-auto p-6 bg-white rounded-xl mb-8">
    <img
      src={post.coverimage}
      alt={post.title}
      class="w-full h-64 object-cover rounded-lg mb-6"
    />
    <h2 class="text-3xl font-bold mb-4 text-indigo-700">{post.title}</h2>
    <p class="text-gray-700 leading-relaxed">{post.content}</p>
  </div>

  <div
    class="max-w-4xl mx-auto p-6 bg-gradient-to-br from-purple-50 to-indigo-50 rounded-xl shadow-lg"
  >
    <h3 class="text-2xl font-bold mb-6 text-indigo-700 text-center">
      Comentarios
    </h3>
    <div id="comments-list" class="space-y-6">
      {
        comments.map((comment) => (
          <div class="bg-white p-6 rounded-lg shadow-md transition-all duration-300 hover:shadow-xl">
            <div class="flex items-start space-x-4">
              <div class="flex-shrink-0">
                <div class="w-12 h-12 rounded-full bg-gradient-to-br from-indigo-400 to-purple-500 flex items-center justify-center text-white font-bold text-lg">
                  {comment.user_id.username[0].toUpperCase()}
                </div>
              </div>
              <div class="flex-1 min-w-0">
                <p class="text-gray-800 text-sm">{comment.content}</p>
                <span class="text-sm text-gray-500 mt-2 block">
                  {new Date(comment.created_at).toLocaleString()}
                </span>
              </div>
            </div>
          </div>
        ))
      }
    </div>
    <form
      method="POST"
      class="mb-8 mt-8 bg-white p-6 rounded-lg shadow-md transition-all duration-300 hover:shadow-xl"
    >
      <div class="mb-4">
        <label
          for="content"
          class="block text-sm font-medium text-gray-700 mb-1"
          >Tu comentario</label
        >
        <textarea
          id="content"
          name="content"
          rows="4"
          required
          class="w-full px-3 py-2 bg-gray-50 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-300"
          placeholder="Escribe tu comentario aquí"></textarea>
      </div>
      <button
        type="submit"
        class="w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-300"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 inline-block mr-1"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z"
            clip-rule="evenodd"></path>
        </svg>
        Enviar comentario
      </button>
    </form>


  </div>
  <a href={'/categories/articles'} class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
    Atrás 
  </a>
</Layout>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  #comments-list > div {
    animation: fadeIn 0.5s ease-out;
  }
  a{
    margin: 60px 40px; 
  }
</style>
