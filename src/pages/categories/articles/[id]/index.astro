---
import Layout from "../../../../layouts/Layout.astro";
import { supabase } from "../../../../lib/supabase";

// Obtiene el parámetro 'id' de la URL
const { id } = Astro.params;

// Si no hay 'id', redirige a la página 404
if (!id) {
  return Astro.redirect("/404");
}

// Consulta el post en la base de datos usando el 'id'
const { data: post, error: postError } = await supabase
  .from("articles")
  .select("*")
  .eq("id", id?.toString())
  .single();

// Si hay un error o no se encuentra el post, redirige a la página 404
if (postError || !post) {
  return Astro.redirect("/404");
}

// Consulta los comentarios del post en la base de datos
const { data: comments, error: commentsError } = await supabase
  .from("comments")
  .select("content, created_at, user_id, users(username)")
  .eq("article_id", id?.toString())
  .order("created_at", { ascending: false })

// Muestra los comentarios en la consola para depuración
console.log(comments);

// Si hay un error al obtener los comentarios, lo muestra en la consola
if (commentsError) {
  console.error(commentsError);
}

// Maneja el envío de un nuevo comentario
if (Astro.request.method === "POST") {
  try {
    const { cookies, redirect } = Astro;
    const accessToken = cookies.get("sb-access-token");
    const refreshToken = cookies.get("sb-refresh-token");
    const data = await Astro.request.formData();
    const content = data.get("content");

    // Si no hay tokens de acceso, redirige a la página de inicio de sesión
    if (!accessToken || !refreshToken) {
      return Astro.redirect("/signin");
    }

    // Si el contenido del comentario está vacío, lanza un error
    if (!content) {
      throw new Error("El contenido del comentario es requerido");
    }

    let session;
    try {
      // Establece la sesión con los tokens
      session = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
      });

      // Si hay un error en la sesión, borra las cookies y redirige a la página de inicio de sesión
      if (session.error) {
        Astro.cookies.delete("sb-access-token", {
          path: "/",
        });
        Astro.cookies.delete("sb-refresh-token", {
          path: "/",
        });
        return Astro.redirect("/signin");
      }
    } catch (error) {
      // Si hay un error al establecer la sesión, borra las cookies y redirige a la página de inicio de sesión
      Astro.cookies.delete("sb-access-token", {
        path: "/",
      });
      Astro.cookies.delete("sb-refresh-token", {
        path: "/",
      });
      return Astro.redirect("/signin");
    }

    const user_id = session.data.user?.id;

    // Si no se encuentra el 'user_id', redirige a la página de inicio de sesión
    if (!user_id) {
      return Astro.redirect("/signin");
    }

    // Consulta el perfil del usuario en la base de datos
    const {data:profile, error:errorFoundUser} = await supabase.from("users").select("*").eq("id", user_id).single();

    // Si hay un error al obtener el perfil del usuario, redirige a la página de inicio de sesión
    if (errorFoundUser) {
      return Astro.redirect("/signin");
    }

    // Inserta el nuevo comentario en la base de datos
    const { error } = await supabase
    .from("comments")
    .insert([
      {
        content: content,
        user_id: profile.id,
        article_id: id
      }
    ]);

    // Si hay un error al guardar el comentario, lanza un error
    if (error) {
      throw new Error("No se pudo guardar el comentario");
    }

    // Redirige a la misma página para mostrar el nuevo comentario
    return redirect(Astro.request.url);
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout title={`Tuna Awainan: ${post.title}`}>
  
  <br>
  <a href={'/categories/articles'} class= " btn-back btn-back:hover text-white fixed bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">
    Atrás 
  </a>
  <div class="max-w-4xl mx-auto p-6 bg-white rounded-xl mb-8">
    <img
      src={post.coverimage}
      alt={post.title}
      class="w-full h-64 object-cover rounded-lg mb-6"
    />
    <h2 class="text-3xl font-bold mb-4 ">{post.title}</h2>
    <p class="text-gray-700 leading-relaxed">{post.content}</p>
  </div>

  <div
    class="max-w-4xl mx-auto p-6"
  >   
    </div>
    <section class="bg-white dark:bg-gray-900 py-8 lg:py-16 antialiased">
      <div class="max-w-2xl mx-auto px-4">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-lg lg:text-2xl font-bold text-gray-900 dark:text-white">Comentarios</h2>
        </div>
        <form class="mb-6 flex flex-col" method="POST">
            <div class="py-2 px-4 mb-4 bg-white rounded-lg rounded-t-lg border border-gray-200 dark:bg-gray-800 dark:border-gray-700">
                <label for="comment" class="sr-only">Tu comentario</label>
                <textarea id="comment" name="content" rows="6"
                    class="px-0 w-full text-sm text-gray-900 border-0 focus:ring-0 focus:outline-none dark:text-white dark:placeholder-gray-400 dark:bg-gray-800"
                    placeholder="Escribe tu comentario" required></textarea>
            </div>

            <button type="submit"
                class="inline-flex items-center bg-[#0cc0df] ml-auto py-2.5 px-4 text-xs font-medium text-center text-white bg-[p] rounded-lg focus:ring-4 focus:ring-blue-200 dark:focus:ring-primary-900 hover:bg-primary-800">
                Post comment
            </button>

        </form>

        {comments && comments.map((comment) => (
        <article class="p-6 text-base bg-white rounded-lg dark:bg-gray-900">
            <footer class="flex justify-between items-center mb-2">
                <div class="flex items-center">
                <div class="relative inline-flex items-center justify-center w-10 h-10 overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600">
                    <span class="font-medium text-gray-600 dark:text-gray-300">
                        {comment?.users?.username[0].toUpperCase()}
                    </span>
                </div>
                <div class="ml-2">
                    <h3 class="text-sm font-semibold text-gray-900 dark:text-white">{comment.users?.username}</h3>
                    
                </div>
            </footer>
            <p class="text-gray-500 ml-2 dark:text-gray-400">
                {comment.content}
            </p>
            <!-- Divider -->
            <div class="my-4 border-b border-gray-200 dark:border-gray-700"></div>
        </article>
        ))}
      </div>
      
    </form>
  </div>
</Layout>


<style>
p{
      text-align: justify;

}

  h2{
    font-family: 'Quicksand Variable', sans-serif;
    font-size: 32px;
    font-weight: 700;
    color: #0cc0df;
  }

  .btn-back {
        @apply text-white font-medium rounded-lg text-sm px-5 py-2.5;
        background-color: rgb(10, 172, 203);
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s ease-in-out;
        left: 1em;
        top: 1em;
        position: relative;
    }

    .btn-back:hover {
        background-color: #0aaccbd4;
        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.2);
        transform: translateY(-2px);
    }




#map {
	height: 100%;
  }
  
  html,
  body {
	height: 100%;
	margin: 0;
	padding: 0;
  }
  
  gmp-map {
	height: 400px;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  #comments-list > div {
    animation: fadeIn 0.5s ease-out;
  }
  a{
    margin: 60px 40px; 
  }
</style>



