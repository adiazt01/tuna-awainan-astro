---
import Image from "astro/components/Image.astro";
import Layout from "../../../layouts/Layout.astro";
import { supabase } from "../../../lib/supabase";

// Obtener los parámetros de búsqueda de la URL
const querySearch = new URLSearchParams(Astro.url.search);
const nameQueryToSearch = querySearch.get("name");

// Obtener el número de página actual, por defecto es 1
const page = parseInt(querySearch.get("page") || "1");
const articlesPerPage = 3; // Número de artículos por página
const from = (page - 1) * articlesPerPage; // Índice de inicio
const to = from + articlesPerPage - 1; // Índice de fin

// // Filtrar los artículos por categoría
// const { data: filteredArticles, error: errorFilteredArticles } = await supabase
//   .from("posts")
//   .select("title, id, tags(name), coverimage, content")
//   .like("tags.name", `%${nameQueryToSearch}%`)
//   .range(from, to);

// if (errorFilteredArticles) {
//   return Astro.redirect("/404");
// }
// Obtener la cantidad total de artículos
const { count: totalArticles, error: errorTotalArticles } = await supabase
  .from("articles")
  .select("title, id, tags!inner(*), coverimage, content", { count: "exact" })
  .ilike("tags.name", `%${nameQueryToSearch}%`);

// Obtener los artículos para la página actual
const { data: articles, error: errorArticles } = await supabase
  .from("articles")
  .select("title, id, tags!inner(*), coverimage, content")
  .ilike("tags.name", `%${nameQueryToSearch}%`)
  .range(from, to);

  console.log(articles)


// // Obtener las categorías
// const { data: categories, error: errorCategories } = await supabase
//   .from("tags")
//   .select("name, id")
//   .order("name", { ascending: true })
//   .range(0, 3);

// // Obtener artículos relacionados
// const { data: relatedArticles, error: errorRelatedArticles } = await supabase
//   .from("articles")
//   .select("title, id, tags(name), coverimage, content")
//   .range(0, 2);

// Redirigir a la página 404 si hay errores o no hay artículos
if (errorArticles || errorArticles) {
  console.log(errorArticles)
  console.log(errorTotalArticles)
  return Astro.redirect("/404");
}

// Redirigir a la página 404 si la página es inválida
if (page < 1 || totalArticles === null || from > totalArticles) {
  return Astro.redirect("/404");
}

// Calcular si hay más páginas disponibles
const hasNextPage = to + 1 < totalArticles;
const hasPreviousPage = page > 1;
---

<Layout title="Tuna Awainan: Articulos">
  <div class="items-center justify-center mt-5">
    <!-- Botón para la página anterior -->
    <a
      href={`/categories/articles?name=${nameQueryToSearch}&page=${page - 1}`}
      class={`px-4 py-2  text-gray-700 bg-white border rounded-md ${!hasPreviousPage ? "pointer-events-none opacity-50" : ""}`}
    >
      Anterior
    </a>
    <!-- Botón para la página siguiente -->
    <a
      href={`/categories/articles?name=${nameQueryToSearch}&page=${page + 1}`}
      class={`px-4 py-2  text-gray-700 bg-white border rounded-md ${!hasNextPage ? "pointer-events-none opacity-50" : ""}`}
    >
      Siguiente
    </a>
  </div>
  <section
    class="w-full px-8 pt-14 gap-24 grid grid-cols-1 lg:grid-cols-2 mx-auto"
  >
    <div class="flex flex-col gap-4">
      <header>
        <h1 class="text-4xl font-bold text-pretty">Artículos</h1>
        <p class="text-lg text-gray-700 dark:text-gray-400">
          {articles.length} Artículos encontrados de la categoría {
            nameQueryToSearch?.toLowerCase()
          }
        </p>
      </header>
      <ul class="grid grid-cols-1 max-w-screen-md gap-8">
        {
          // Mostrar los artículos
          articles.map((article) => (
            <li class="w-full">
              <a
                href={`/categories/articles/${article.id}`}
                class="grid grid-cols-1 border-x-lime-100 lg:grid-cols-2 w-full items-start bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700 min-h-56"
              >
                <img
                  class="object-cover w-full h-ull min-h-56 rounded-t-lg  md:rounded-none md:rounded-s-lg"
                  src={article.coverimage}
                  alt=""
                />
                <div class="flex h-full flex-col justify-between p-4 leading-normal">
                  <h5 class="mb-2 text-2xl text-pretty truncate font-bold tracking-tight text-gray-900 dark:text-white">
                    {article.title.length > 50
                      ? article.title.substring(0, 35) + "..."
                      : article.title}
                  </h5>
                  <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">
                    {article.content.substring(0, 100) + "..."}
                  </p>

                  <button
                    type="button"
                    class="text-white mt-auto bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800"
                  >
                    Leer más
                  </button>
                </div>
              </a>
            </li>
          ))
        }
      </ul>
      <div class="flex justify-center mt-8">
       
      </div>
    </div>
    <div class="flex flex-col gap-8">
      <section class="flex flex-col">
        <h2 class="text-2xl font-bold text-pretty mb-2">Otras categorías</h2>

        </ul>
      </section>
    </div>
  </section>
</Layout>

<style></style>
