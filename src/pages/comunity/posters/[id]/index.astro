---
import Layout from "../../../../layouts/Layout.astro";
import { supabase } from "../../../../lib/supabase";

const {id } = Astro.params

if (!id) {
  return Astro.redirect('/404');
}

const { data: blog, error: errorBlog } = await supabase
  .from("blogs")
  .select(`*, user_id (
     username
      ))`)
  .eq("id", id)

console.log(blog)

if (errorBlog) {
  return Astro.redirect('/404');
}

// Maneja el envío de un nuevo comentario
if (Astro.request.method === "POST") {
  try {
    const { cookies, redirect } = Astro;
    const accessToken = cookies.get("sb-access-token");
    const refreshToken = cookies.get("sb-refresh-token");
    const data = await Astro.request.formData();
    
    const content = data.get("content");

    // Si no hay tokens de acceso, redirige a la página de inicio de sesión
    if (!accessToken || !refreshToken) {
      return Astro.redirect("/signin");
    }

    // Si el contenido del comentario está vacío, lanza un error
    if (!content) {
      throw new Error("El contenido del comentario es requerido");
    }

    let session;
    try {
      // Establece la sesión con los tokens
      session = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
      });

      // Si hay un error en la sesión, borra las cookies y redirige a la página de inicio de sesión
      if (session.error) {
        Astro.cookies.delete("sb-access-token", {
          path: "/",
        });
        Astro.cookies.delete("sb-refresh-token", {
          path: "/",
        });
        return Astro.redirect("/signin");
      }
    } catch (error) {
      // Si hay un error al establecer la sesión, borra las cookies y redirige a la página de inicio de sesión
      Astro.cookies.delete("sb-access-token", {
        path: "/",
      });
      Astro.cookies.delete("sb-refresh-token", {
        path: "/",
      });
      return Astro.redirect("/signin");
    }

    const user_id = session.data.user?.id;

    // Si no se encuentra el 'user_id', redirige a la página de inicio de sesión
    if (!user_id) {
      return Astro.redirect("/signin");
    }

    // Consulta el perfil del usuario en la base de datos
    const {data:profile, error:errorFoundUser} = await supabase.from("users").select("*").eq("id", user_id).single();

    // Si hay un error al obtener el perfil del usuario, redirige a la página de inicio de sesión
    if (errorFoundUser) {
      return Astro.redirect("/signin");
    }

    // Inserta el nuevo comentario en la base de datos
    const { error } = await supabase
    .from("comments")
    .insert([
      {
        content: content,
        user_id: profile.id,
        article_id: id
      }
    ]);

    // Si hay un error al guardar el comentario, lanza un error
    if (error) {
      throw new Error("No se pudo guardar el comentario");
    }

    // Redirige a la misma página para mostrar el nuevo comentario
    return redirect(Astro.request.url);
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout>
    <section class="grid p-8 grid-cols-1 w-full max-w-screen-xl">
        
    <div class="flex flex-col w-full">
    
    <div class="flex flex-row items-center gap-4">
        <div class="relative inline-flex items-center justify-center size-10 overflow-hidden bg-gray-100 rounded-full dark:bg-gray-600">
            <span class="font-medium text-gray-600 dark:text-gray-300">JL</span>
        </div>
        <p class="text-sm font-medium text-gray-600 dark:text-gray-300">
            {blog[0].user_id.username.toUpperCase()}
        </p>
    </div>

    <h5 class="mb-2 text-xl mt-4  font-bold tracking-tight text-gray-900 dark:text-white">
        {blog[0].title}
    </h5>
    <p class="font-normal text-gray-700 dark:text-gray-400">
        {blog[0].content}
    </p>
    </section>
  </div>
</Layout>
